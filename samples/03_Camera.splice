{
  "version": "1013001",
  "info": {
    "hostAppName": "Splice Standalone",
    "hostAppVersion": "1.0"
  },
  "nodes": [
    {
      "name": "DGNode",
      "dependencies": {},
      "bindings": [
        {
          "operator": {
            "name": "hydraOp",
            "entry": "hydraOp",
            "filename": "hydraOp.kl",
            "kl": "require InlineDrawing;\nrequire RazerHydra;\nrequire SpliceStandalone:\">1.0.0\";\nrequire Singletons;\n\n/// custom drawing callback\nobject HydraCameraCallback : ViewportCallback {\n  RazerHydraController hydra;\n};\n\nfunction HydraCameraCallback(RazerHydraController hydra) {\n  this.hydra = hydra;\n}\n\nfunction Boolean HydraCameraCallback.invoke!(ViewportDrawPhase phase, io Viewport viewport, io DrawContext context) {\n  Xfo xfo;\n  xfo.tr = this.hydra.controls[0].pos * 0.05;\n  xfo.ori = this.hydra.controls[0].rot_quat;\n  InlineCamera camera = viewport.getCamera();\n  camera.xfo = xfo;\n  \n  return false; // continue with standard behaviour\n}\n\noperator hydraOp(io ViewportCallback  callback, io DrawingHandle handle, io RazerHydraController hydra, in Scalar time)\n{\n  if(handle.isEmpty()) {\n    PolygonMesh mesh();\n    mesh.addCuboid(Xfo(), 1, 1, 1, true, true);\n    InlineMeshShape shape('cube', mesh);\n    \n    InlineTransform controllers = StaticInlineTransform('controllers', handle.getRootTransform(), Xfo());\n\n    InlineShader shader = handle.getDrawing().registerShader(OGLSurfaceShader());\n    InlineMaterial mat = shader.getOrCreateMaterial('mat');    \n    \n    InlineInstance instance('controllers', controllers, shape);\n    instance.addMaterial(mat);\n    instance.setTransformUniform(InlineUniform('u_diffuseColor', Color(1.0, 0.0, 0.0)), 0);\n  }\n  \n  hydra.update();\n\n  Xfo xfo;\n  xfo.tr = hydra.controls[1].pos * 0.05;\n  xfo.ori = hydra.controls[1].rot_quat;\n  xfo.sc *= 2.0;\n\n  if(hydra.controls[1].buttons & SIXENSE_BUTTON_1)\n     xfo.sc *= 2.5;\n  if(hydra.controls[1].buttons & SIXENSE_BUTTON_2)\n    xfo.sc *= Vec3(0.5, 2, 0.5);\n  if(hydra.controls[1].buttons & SIXENSE_BUTTON_BUMPER)\n    xfo.sc *= Vec3(2, 0.5, 0.5);\n  xfo.sc *= Vec3(1, 1, 1).linearInterpolate(Vec3(3, 0.1, 3), hydra.controls[1].trigger);\n\n  InlineTransform controllers = handle.getRootTransform().getChild('controllers');\n  controllers.setLocalXfo(0, xfo);  \n  \n  /// setup the custom rendering callback in case it's not there yet\n  if(!callback) {\n    InlineDrawing drawing = Singleton_get('InlineDrawing');\n    Viewport viewport = drawing.getViewport('default');\n    if(viewport) {\n      callback = HydraCameraCallback(hydra);\n      viewport.registerCallback(ViewportDrawPhase_PreDraw, callback);\n    }\n  }\n}\n",
            "portmap": {}
          }
        }
      ]
    }
  ],
  "extensions": [
    "RazerHydra"
  ],
  "ports": [
    {
      "name": "callback",
      "node": "DGNode",
      "graph": "03_Camera",
      "type": "ViewportCallback",
      "autoInitObjects": false,
      "member": "callback",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "handle",
      "node": "DGNode",
      "graph": "03_Camera",
      "type": "DrawingHandle",
      "autoInitObjects": true,
      "member": "handle",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "hydra",
      "node": "DGNode",
      "graph": "03_Camera",
      "type": "RazerHydraController",
      "autoInitObjects": true,
      "member": "hydra",
      "mode": "io",
      "persistence": false
    },
    {
      "name": "time",
      "node": "DGNode",
      "graph": "03_Camera",
      "type": "Scalar",
      "autoInitObjects": true,
      "member": "time",
      "mode": "in",
      "persistence": false
    }
  ]
}